// schema.prisma

generator client {
  provider = "prisma-client-js"
}

// datasource db {
//   provider = "sqlserver"
//   url      = env("DATABASE_URL")
// }

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Ticket {
  Id             Int          @id @default(autoincrement())
  RequestQueue   RequestQueue @relation(fields: [RequestQueueId], references: [Id], onDelete: NoAction, onUpdate: NoAction)
  RequestQueueId Int
  Requester      RequestArea  @relation(fields: [RequesterId], references: [Id], onDelete: NoAction, onUpdate: NoAction)
  CreatedOn      DateTime     @default(now())
  AssignedOn     DateTime?
  StartedOn      DateTime?
  CompletedOn    DateTime?
  Status         String       @default("Open")
  RequesterId    Int
  PlantId        Int

  @@map(name: "Tickets")
}

model AuthorizedIpAddress {
  Id        Int      @id @default(autoincrement())
  Ip        String
  Plant     Plant    @relation(fields: [PlantId], references: [Id])
  PlantId   Int
  CreatedOn DateTime @default(now())

  @@map(name: "AuthorizedIpAddresses")
}

model Plant {
  Id           Int                   @id @default(autoincrement())
  Name         String                @db.VarChar(64)
  IpAddresses  AuthorizedIpAddress[]
  RequestQueue RequestQueue[]
  RequestArea  RequestArea[]
  CreatedOn    DateTime              @default(now())

  @@map(name: "Plants")
}

model RequestQueue {
  Id        Int      @id @default(autoincrement())
  Name      String   @db.VarChar(64)
  Status    String?  @db.VarChar(24)
  Plant     Plant    @relation(fields: [PlantId], references: [Id])
  PlantId   Int
  Tickets   Ticket[]
  CreatedOn DateTime @default(now())

  @@map(name: "RequestQueues")
}

model RequestArea {
  Id          Int      @id @default(autoincrement())
  Name        String   @db.VarChar(64)
  Description String?  @db.VarChar(64)
  Status      String   @default("Active")
  Plant       Plant    @relation(fields: [PlantId], references: [Id])
  PlantId     Int
  Tickets     Ticket[]
  CreatedOn   DateTime @default(now())

  @@map(name: "RequestAreas")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
