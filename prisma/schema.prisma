// schema.prisma

generator client {
  provider = "prisma-client-js"
}

generator custom_generator {
    provider = "prisma-generator-fake-data"
    output   = "./fake-data.ts"
}

// datasource db {
//   provider = "sqlserver"
//   url      = env("DATABASE_URL")
// }

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Ticket {
  Id             Int          @id @default(autoincrement())
  RequestQueue   RequestQueue @relation(fields: [RequestQueueId], references: [Id], onDelete: NoAction, onUpdate: NoAction)
  RequestQueueId Int
  Requester      RequestArea  @relation(fields: [RequesterId], references: [Id], onDelete: NoAction, onUpdate: NoAction)
  CreatedOn      DateTime     @default(now())
  AssignedOn     DateTime?
  StartedOn      DateTime?
  CompletedOn    DateTime?
  Status         String       @default("Open")
  RequesterId    Int

  @@map(name: "Tickets")
}


model RequestQueue {
  Id        Int      @id @default(autoincrement())
  Name      String   @db.VarChar(64)
  Status    String?  @db.VarChar(24)
  Tickets   Ticket[]
  CreatedOn DateTime @default(now())

  @@map(name: "RequestQueues")
}

model RequestArea {
  Id          Int      @id @default(autoincrement())
  Name        String   @db.VarChar(64)
  Description String?  @db.VarChar(64)
  Status      String   @default("Active")
  Tickets     Ticket[]
  CreatedOn   DateTime @default(now())

  @@map(name: "RequestAreas")
}